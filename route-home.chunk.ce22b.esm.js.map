{"version":3,"sources":["webpack:///./routes/home/index.js","webpack:///./components/MovesList/style.css","webpack:///./components/MovesList/index.js","webpack:///./components/Loading/style.css","webpack:///./components/Loading/index.js","webpack:///./components/PokedexArea/style.css","webpack:///./components/PokedexArea/index.js","webpack:///./components/PokemonSearch/style.css","webpack:///./components/PokemonSearch/index.js","webpack:///./components/CopyButton/index.js","webpack:///./components/VersionSelector/index.js","webpack:///./components/AbilityList/index.js"],"names":["Home","loading","stores","useContext","AppState","consent","useSignal","copyArea","useRef","useEffect","async","value","getItem","ConsentButton","onClick","setItem","loadStores","class","href","style","ClipboardItem","copyRef","id","ref","MovesList","currentPokemon","version","move_list","generate_moves_section","Promise","all","moves","map","move","move_id","type","category","type_style","color","category_style","name","effect","generate_move_row","generate_moves_area","req","Object","entries","method_id","method","move_learn_method","move_section","generate_move_list","description","pokemon_move","version_moves","Loading","loadingStates","LoadingBall","src","rotate","pokeball","join","_loadingStates","store","state","filter","PokedexArea","updateVersion","pokemon_entry","versions","version_group","red_flavor_text","blue_flavor_text","type1","type2","type1style","type2style","feet","andInches","meters","lb","kg","image","prevImage","details","pokemon","_image","sprite","_type1","types","_type2","pokemon_name","height","weight","window","URL","revokeObjectURL","createObjectURL","rowSpan","colSpan","PokemonSearch","pokemonSearchError","currentPokemonInput","listOfPokemonNames","listOfPokemonIds","nameIdMap","names","ids","_nameIdMap","iterate","order","toLowerCase","search","onSubmitCapture","e","preventDefault","includes","list","onInput","target","trim","CopyButton","copied","blobInput","Blob","current","innerHTML","navigator","clipboard","write","VersionSelector","versionList","pokemon_version","_versionReqs","sortedVersionList","sort","a","b","onChange","AbilityList","ability_list","get_ability_list","abilities","ability","ability_id","get_ability_row"],"mappings":"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","file":"route-home.chunk.ce22b.esm.js","sourcesContent":["import { h } from 'preact'\nimport { useContext, useEffect, useRef } from 'preact/hooks'\nimport AppState from '../../appState'\nimport style from './style.css'\n// Code-splitting is automated for `routes` directory\n// We'll remember that when we add a new Header and more Search Bys\n\nimport PokemonSearch from '../../components/PokemonSearch'\nimport AbilityList from '../../components/AbilityList'\nimport MovesList from '../../components/MovesList'\nimport PokedexArea from '../../components/PokedexArea'\nimport VersionSelector from '../../components/VersionSelector'\nimport Loading from '../../components/Loading'\nimport CopyButton from '../../components/CopyButton'\nimport { useSignal } from '@preact/signals'\nimport loadStores from '../../lib/loadStores'\n\nconst Home = () => {\n  const { loading, stores } = useContext(AppState)\n  const consent = useSignal(false)\n  const copyArea = useRef(null)\n\n  useEffect(async () => {\n    consent.value = await stores.value.consent.getItem('consent')\n  }, [stores.value])\n\n  const ConsentButton = () => {\n    const onClick = async () => {\n      consent.value = true\n      stores.value.consent.setItem('consent', true)\n      stores.value = await loadStores(loading)\n    }\n    return (\n      <div>\n        <p>\n          Look like its your first time here! You need to download about 13 MB\n          of data to use this website.\n        </p>\n        <details>\n          <summary>Click here to see the List of Files</summary>\n          <ul>\n            <li>181K ability</li>\n            <li>157 category</li>\n            <li>955K move</li>\n            <li>1.6K move_learn_method</li>\n            <li>1.8M pokemon_entry</li>\n            <li>232K pokemon</li>\n            <li>6.4M pokemon_move</li>\n            <li>42K pokemon_name</li>\n            <li>191K pokemon_version</li>\n            <li>939 type</li>\n            <li>2.2K version_group</li>\n            <li>1.4K version</li>\n            <li>1.4M sprites</li>\n          </ul>\n        </details>\n        <button onClick={onClick}>Click here to download 13 MB of data</button>\n      </div>\n    )\n  }\n\n  const MainArea = () => {\n    if (!consent.value) {\n      return <ConsentButton />\n    }\n    if (loading.value) {\n      return <Loading />\n    }\n    if (stores.value) {\n      return (\n        <>\n          <PokemonSearch style='width:100%;' />\n          <VersionSelector />\n          {typeof ClipboardItem !== 'undefined' ? (\n            <CopyButton copyRef={copyArea} />\n          ) : (\n            ''\n          )}\n          <div id='copySection' ref={copyArea}>\n            <PokedexArea />\n            <AbilityList />\n            <MovesList />\n          </div>\n        </>\n      )\n    }\n  }\n\n  return (\n    <div class='home'>\n      <h1>Welcome to Fake Pokeyman Helper</h1>\n      <p>\n        Type in a name, hit submit, and get a table of moves that you can copy\n        into a Google Doc to get the format everyone likes.\n      </p>\n      <p>\n        Feel free to make feature requests on the{' '}\n        <a href='https://github.com/kinostl/pokeymanz-generator/issues'>\n          issues page\n        </a>{' '}\n        or Direct Message ZoneBooth (Trick Room) on the Pokeymanz server.\n      </p>\n      <p>Note - You need to copy and resize images yourself.</p>\n      {stores.value ? <MainArea /> : ''}\n    </div>\n  )\n}\n\nexport default Home\n","// extracted by mini-css-extract-plugin\nexport default {\"moves_area\":\"moves_area__eGfUL\"};","import { useSignal } from '@preact/signals'\nimport { h } from 'preact'\nimport { useContext, useEffect } from 'preact/hooks'\nimport AppState from '../../appState'\nimport style from './style.css'\n\nconst MovesList = () => {\n  const { stores, currentPokemon } = useContext(AppState)\n  if (!currentPokemon.value.id || !currentPokemon.value.version) return ''\n\n  const move_list = useSignal([])\n\n  const generate_move_row = async (move_id, version) => {\n    const move = await stores.value.move.getItem(move_id)\n    const type = await stores.value.type.getItem(move.type)\n    const category = await stores.value.category.getItem(move.category)\n    const type_style = `background-color:${type.color};color:rgba(0,0,0,0.5)`\n    const category_style = `background-color:${category.color};color:rgba(0,0,0,0.5)`\n\n    return (\n      <tr>\n        <td>{move.name}</td>\n        <td>{move.effect[version]}</td>\n        <td style={type_style}>{type.name}</td>\n        <td style={category_style}>{category.name}</td>\n      </tr>\n    )\n  }\n  const generate_moves_section = async moves => {\n    const version = currentPokemon.value.version\n    return Promise.all(moves.map(move => generate_move_row(move, version)))\n  }\n\n  const generate_move_list = async moves => {\n    const move_section = await generate_moves_section(moves)\n    return (\n      <table>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Category</th>\n          <th>Type</th>\n        </tr>\n        {move_section}\n      </table>\n    )\n  }\n  const generate_moves_area = req => {\n    return Promise.all(\n      Object.entries(req).map(async ([method_id, moves]) => {\n        const method = await stores.value.move_learn_method.getItem(method_id)\n        const move_list = await generate_move_list(moves)\n        return (\n          <section id={method.id}>\n            <header>\n              <h2>{method.name}</h2>\n              <p class='tagline'>{method.description}</p>\n            </header>\n            {move_list}\n          </section>\n        )\n      })\n    )\n  }\n\n  useEffect(async () => {\n    const id = currentPokemon.value.id\n    const version = currentPokemon.value.version\n    const { moves } = await stores.value.pokemon_move.getItem(id)\n    const version_moves = moves[version]\n    move_list.value = await generate_moves_area(version_moves)\n  }, [currentPokemon.value.id, currentPokemon.value.version])\n\n  return <div class={style.moves_area}>{move_list.value}</div>\n}\n\nexport default MovesList\n","// extracted by mini-css-extract-plugin\nexport default {\"rotate\":\"rotate__Jkq5d\",\"rotation\":\"rotation__4Zr8b\",\"pokeball\":\"pokeball__1HbTN\"};","import { h } from 'preact'\nimport { useEffect, useContext } from 'preact/hooks'\nimport { useSignal } from '@preact/signals'\nimport style from './style.css'\nimport AppState from '../../appState'\n\nconst Loading = () => {\n  const { loading } = useContext(AppState)\n  const loadingStates = useSignal([])\n  const LoadingBall = () => (\n    <img\n      src='./assets/pokeball.svg'\n      class={[style.rotate, style.pokeball].join(' ')}\n    />\n  )\n  useEffect(() => {\n    const _loadingStates = Object.entries(loading.value)\n    loadingStates.value = _loadingStates\n      .map(([store, state]) => {\n        if (state) {\n          return (\n            <p>\n              <LoadingBall />\n              {state}\n            </p>\n          )\n        }\n        return 0\n      })\n      .filter(state => state != 0)\n  }, [loading.value])\n  return (\n    <div>\n      <p>Downloading a lot of data.</p>\n      <p>{loadingStates.value}</p>\n    </div>\n  )\n}\n\nexport default Loading\n","// extracted by mini-css-extract-plugin\nexport default {\"pokeSprite\":\"pokeSprite__H0Us5\"};","import convert from 'convert'\nimport { h } from 'preact'\nimport style from './style.css'\n\nimport { useContext, useEffect } from 'preact/hooks'\nimport { useSignal } from '@preact/signals'\nimport AppState from '../../appState'\n\nconst PokedexArea = () => {\n  const { stores, currentPokemon } = useContext(AppState)\n  if (!currentPokemon.value.id || !currentPokemon.value.version) return ''\n  //All these signals are because of how optimizing preact works.\n\n  const name = useSignal('')\n  const category = useSignal('')\n  const type1 = useSignal('')\n  const type2 = useSignal('')\n  const type1style = useSignal('')\n  const type2style = useSignal('')\n  const feet = useSignal('')\n  const andInches = useSignal('')\n  const meters = useSignal('')\n  const lb = useSignal('')\n  const kg = useSignal('')\n  const red_flavor_text = useSignal('')\n  const blue_flavor_text = useSignal('')\n  const image = useSignal('')\n  const prevImage = useSignal('')\n\n  async function updateVersion () {\n    const id = currentPokemon.value.id\n    const version = currentPokemon.value.version\n    const { entries } = await stores.value.pokemon_entry.getItem(id)\n    const { versions } = await stores.value.version_group.getItem(version)\n    red_flavor_text.value = entries[versions[0]] || ''\n    blue_flavor_text.value = entries[versions[1]] || ''\n  }\n\n  const DesktopTable = () => (\n    <table style='width:100%;'>\n      <tr>\n        <td rowSpan={7} style='min-width: 288px;'>\n          <img src={image.value} class={style.pokeSprite} />\n        </td>\n\n        <td colSpan={3}>{name}</td>\n      </tr>\n      <tr>\n        <td colSpan={3}>{category}</td>\n      </tr>\n      <tr>\n        <td>Types</td>\n        <td style={type1style}>{type1}</td>\n        <td style={type2style}>{type2}</td>\n      </tr>\n      <tr>\n        <td>Height</td>\n        <td colSpan={2}>\n          {feet}' {andInches}\" ({meters} m)\n        </td>\n      </tr>\n      <tr>\n        <td>Weight</td>\n        <td colSpan={2}>\n          {lb} lb ({kg} kg)\n        </td>\n      </tr>\n      <tr>\n        <td colSpan={3}>{red_flavor_text}</td>\n      </tr>\n      <tr>\n        <td colSpan={3}>{blue_flavor_text}</td>\n      </tr>\n    </table>\n  )\n\n  useEffect(async () => {\n    const id = currentPokemon.value.id\n    const { details } = await stores.value.pokemon.getItem(id)\n    const _image = await stores.value.sprite.getItem(id)\n    const _type1 = details.types[0]\n      ? await stores.value.type.getItem(details.types[0])\n      : { name: '', color: 'transparent' }\n    const _type2 = details.types[1]\n      ? await stores.value.type.getItem(details.types[1])\n      : { name: '', color: 'transparent' }\n    name.value = await stores.value.pokemon_name.getItem(id)\n    name.value = name.value.name\n    category.value = details.category\n    type1.value = _type1.name\n    type2.value = _type2.name\n    type1style.value = `background-color:${_type1.color};color:rgba(0,0,0,0.5)`\n    type2style.value = `background-color:${_type2.color};color:rgba(0,0,0,0.5)`\n    feet.value = details.height.feet\n    andInches.value = details.height.andInches\n    meters.value = details.height.meters\n    lb.value = details.weight.lb\n    kg.value = details.weight.kg\n    window.URL.revokeObjectURL(prevImage.value)\n    image.value = window.URL.createObjectURL(_image)\n    prevImage.value = image.value\n    await updateVersion()\n  }, [currentPokemon.value.id])\n\n  useEffect(updateVersion, [currentPokemon.value.version])\n\n  return <DesktopTable />\n}\n\nexport default PokedexArea\n","// extracted by mini-css-extract-plugin\nexport default {};","import { h } from 'preact'\nimport { useEffect, useContext } from 'preact/hooks'\nimport { useSignal } from '@preact/signals'\nimport style from './style.css'\nimport AppState from '../../appState'\n\nconst PokemonSearch = () => {\n  const { stores, currentPokemon } = useContext(AppState)\n\n  const pokemonSearchError = useSignal('')\n  const currentPokemonInput = useSignal('')\n  const listOfPokemonNames = useSignal([])\n  const listOfPokemonIds = useSignal([])\n  const nameIdMap = useSignal({})\n\n  useEffect(async () => {\n    const names = []\n    const ids = []\n    const _nameIdMap = {}\n    await stores.value.pokemon_name.iterate(({ id, name, order }) => {\n      names[order] = <option value={name} />\n      ids[order] = id\n      _nameIdMap[name.toLowerCase()] = id\n    })\n    listOfPokemonNames.value = names\n    listOfPokemonIds.value = ids\n    nameIdMap.value = _nameIdMap\n  }, [stores.value.pokemon_name])\n\n  const onSubmit = async e => {\n    e.preventDefault()\n    pokemonSearchError.value = ''\n    const pokemon = nameIdMap.value[currentPokemonInput.value.toLowerCase()]\n    if (pokemon && listOfPokemonIds.value.includes(pokemon)) {\n      currentPokemon.value = {\n        id: pokemon\n      }\n    } else {\n      pokemonSearchError.value = 'Could not find that pokemon'\n    }\n  }\n\n  return (\n    <div class={style.search}>\n      <form onSubmitCapture={onSubmit}>\n        <input\n          list='pokemon'\n          name='pokemon'\n          value={currentPokemonInput}\n          onInput={e => {\n            currentPokemonInput.value = e.target.value.trim()\n          }}\n        />\n        <input type='submit' value='Search by Pokemon' />\n      </form>\n      <p>{pokemonSearchError}</p>\n      <datalist id='pokemon'>{listOfPokemonNames.value}</datalist>\n    </div>\n  )\n}\n\nexport default PokemonSearch\n","import { h } from 'preact'\nimport { useContext, useEffect } from 'preact/hooks'\nimport { useSignal } from '@preact/signals'\nimport AppState from '../../appState'\n\nconst CopyButton = ({ copyRef }) => {\n  const { stores, currentPokemon } = useContext(AppState)\n  if (!currentPokemon.value.id || !currentPokemon.value.version) return ''\n  const copied = useSignal(0)\n  useEffect(async () => {\n    copied.value = 0\n  }, [currentPokemon.value.id, currentPokemon.value.version])\n\n  const onClick = async () => {\n    const htmlCode = copyRef.current.innerHTML\n    const blobInput = new Blob([htmlCode], { type: 'text/html' })\n    await navigator.clipboard.write([\n      new ClipboardItem({ 'text/html': blobInput })\n    ])\n    copied.value++\n  }\n\n  return (\n    <button style='width:100%' onClick={onClick}>\n      {!copied.value ? 'Click here to copy' : `Copied! ${copied.value}`}\n    </button>\n  )\n}\n\nexport default CopyButton\n","import { h } from 'preact'\nimport { useContext, useEffect } from 'preact/hooks'\nimport { useSignal } from '@preact/signals'\nimport AppState from '../../appState'\n\nconst VersionSelector = () => {\n  const { stores, currentPokemon } = useContext(AppState)\n  const versionList = useSignal([])\n\n  if (!currentPokemon.value.id) return ''\n\n  useEffect(async () => {\n    if (!currentPokemon.value.version) {\n      const { versions } = await stores.value.pokemon_version.getItem(\n        currentPokemon.value.id\n      )\n      const _versionReqs = versions.map(version =>\n        stores.value.version_group.getItem(version)\n      )\n\n      const _versionList = await Promise.all(_versionReqs)\n      const sortedVersionList = _versionList.sort((a, b) => b.order - a.order)\n      versionList.value = sortedVersionList.map(({ id, name }) => (\n        <option value={id}>{name}</option>\n      ))\n      currentPokemon.value = {\n        ...currentPokemon.value,\n        version: sortedVersionList[0].id\n      }\n    }\n  }, [currentPokemon.value.id])\n  const onChange = e => {\n    currentPokemon.value = {\n      ...currentPokemon.value,\n      version: e.target.value\n    }\n  }\n\n  return (\n    <div style='display: flex; flex-direction:column;'>\n      <label>Version</label>\n      <select value={currentPokemon.value.version} onChange={onChange}>\n        {versionList.value}\n      </select>\n    </div>\n  )\n}\n\nexport default VersionSelector\n","import { useSignal } from '@preact/signals'\nimport { h } from 'preact'\nimport { useContext, useEffect } from 'preact/hooks'\nimport AppState from '../../appState'\nconst AbilityList = () => {\n  const { stores, currentPokemon } = useContext(AppState)\n  if (!currentPokemon.value.id || !currentPokemon.value.version) return ''\n  const ability_list = useSignal('')\n\n  const get_ability_row = async ability_id => {\n    const ability = await stores.value.ability.getItem(ability_id)\n    const version = currentPokemon.value.version\n    return (\n      <tr>\n        <td>{ability.name}</td>\n        <td>{ability.effect[version]}</td>\n      </tr>\n    )\n  }\n\n  const get_ability_list = async abilities => {\n    return Promise.all(\n      abilities.map(async ability => await get_ability_row(ability))\n    )\n  }\n\n  useEffect(async () => {\n    const id = currentPokemon.value.id\n    const { abilities } = await stores.value.pokemon.getItem(id)\n    ability_list.value = await get_ability_list(abilities)\n  }, [currentPokemon.value.id, currentPokemon.value.version])\n\n  return (\n    <table>\n      <tr>\n        <th colSpan={2}>Abilities</th>\n      </tr>\n      {ability_list.value}\n    </table>\n  )\n}\nexport default AbilityList\n"],"sourceRoot":""}