{"version":3,"sources":["webpack:///./routes/home/index.js","webpack:///./components/MovesList/style.css","webpack:///./components/MovesList/index.js","webpack:///./components/Loading/style.css","webpack:///./components/Loading/index.js","webpack:///./components/PokedexArea/style.css","webpack:///./components/PokedexArea/index.js","webpack:///./components/PokemonSearch/style.css","webpack:///./components/PokemonSearch/index.js","webpack:///./components/VersionSelector/index.js","webpack:///./components/AbilityList/index.js"],"names":["Home","useContext","AppState","loading","stores","consent","useSignal","useEffect","value","getItem","ConsentButton","onClick","setItem","loadStores","class","href","style","MovesList","currentPokemon","id","version","move_list","generate_move_row","move_id","move","type","category","type_style","color","category_style","name","effect","generate_moves_section","moves","Promise","all","map","generate_move_list","move_section","req","version_moves","pokemon_move","Object","entries","method_id","method","move_learn_method","description","Loading","loadingStates","LoadingBall","src","rotate","pokeball","join","_loadingStates","state","filter","PokedexArea","updateVersion","pokemon_entry","versions","version_group","red_flavor_text","blue_flavor_text","type1","type2","type1style","type2style","feet","andInches","meters","lb","kg","image","prevImage","details","pokemon","_image","sprite","_type1","types","_type2","pokemon_name","height","weight","window","URL","revokeObjectURL","createObjectURL","rowSpan","colSpan","PokemonSearch","pokemonSearchError","currentPokemonInput","listOfPokemonNames","listOfPokemonIds","nameIdMap","names","ids","_nameIdMap","iterate","order","toLowerCase","onSubmit","e","preventDefault","includes","search","onSubmitCapture","list","onInput","target","trim","VersionSelector","versionList","_versionReqs","pokemon_version","sortedVersionList","sort","a","b","onChange","AbilityList","ability_list","get_ability_row","ability_id","ability","get_ability_list","abilities"],"mappings":"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","file":"route-home.chunk.e215d.js","sourcesContent":["import { h } from 'preact'\nimport { useContext, useEffect } from 'preact/hooks'\nimport AppState from '../../appState'\nimport style from './style.css'\n// Code-splitting is automated for `routes` directory\n// We'll remember that when we add a new Header and more Search Bys\n\nimport PokemonSearch from '../../components/PokemonSearch'\nimport AbilityList from '../../components/AbilityList'\nimport MovesList from '../../components/MovesList'\nimport PokedexArea from '../../components/PokedexArea'\nimport VersionSelector from '../../components/VersionSelector'\nimport Loading from '../../components/Loading'\nimport { useSignal } from '@preact/signals'\nimport loadStores from '../../lib/loadStores'\n\nconst Home = () => {\n  const { loading, stores } = useContext(AppState)\n  const consent = useSignal(false)\n  useEffect(async () => {\n    consent.value = await stores.value.consent.getItem('consent')\n  }, [stores.value])\n\n  const ConsentButton = () => {\n    const onClick = async () => {\n      consent.value = true\n      stores.value.consent.setItem('consent', true)\n      stores.value = await loadStores(loading)\n    }\n    return (\n      <div>\n        <p>\n          Look like its your first time here! You need to download about 13 MB\n          of data to use this website.\n        </p>\n        <details>\n          <summary>Click here to see the List of Files</summary>\n          <ul>\n            <li>181K ability</li>\n            <li>157 category</li>\n            <li>955K move</li>\n            <li>1.6K move_learn_method</li>\n            <li>1.8M pokemon_entry</li>\n            <li>232K pokemon</li>\n            <li>6.4M pokemon_move</li>\n            <li>42K pokemon_name</li>\n            <li>191K pokemon_version</li>\n            <li>939 type</li>\n            <li>2.2K version_group</li>\n            <li>1.4K version</li>\n            <li>1.4M sprites</li>\n          </ul>\n        </details>\n        <button onClick={onClick}>Click here to download 13 MB of data</button>\n      </div>\n    )\n  }\n\n  const MainArea = () => {\n    if (!consent.value) {\n      return <ConsentButton />\n    }\n    if (loading.value) {\n      return <Loading />\n    }\n    if (stores.value) {\n      return (\n        <>\n          <PokemonSearch style='width:100%;' />\n          <VersionSelector />\n          <PokedexArea />\n          <AbilityList />\n          <MovesList />\n        </>\n      )\n    }\n  }\n\n  return (\n    <div class='home'>\n      <h1>Welcome to Fake Pokeyman Helper</h1>\n      <p>\n        Type in a name, hit submit, and get a table of moves that you can copy\n        into a Google Doc to get the format everyone likes.\n      </p>\n      <p>\n        Feel free to make feature requests on the{' '}\n        <a href='https://github.com/kinostl/pokeymanz-generator/issues'>\n          issues page\n        </a>{' '}\n        or Direct Message ZoneBooth (Trick Room) on the Pokeymanz server.\n      </p>\n      <p>Note - You need to resize images yourself.</p>\n      {stores.value ? <MainArea /> : ''}\n    </div>\n  )\n}\n\nexport default Home\n","// extracted by mini-css-extract-plugin\nexport default {\"moves_area\":\"moves_area__eGfUL\"};","import { useSignal } from '@preact/signals'\nimport { h } from 'preact'\nimport { useContext, useEffect } from 'preact/hooks'\nimport AppState from '../../appState'\nimport style from './style.css'\n\nconst MovesList = () => {\n  const { stores, currentPokemon } = useContext(AppState)\n  if (!currentPokemon.value.id || !currentPokemon.value.version) return ''\n\n  const move_list = useSignal([])\n\n  const generate_move_row = async (move_id, version) => {\n    const move = await stores.value.move.getItem(move_id)\n    const type = await stores.value.type.getItem(move.type)\n    const category = await stores.value.category.getItem(move.category)\n    const type_style = `background-color:${type.color};color:rgba(0,0,0,0.5)`\n    const category_style = `background-color:${category.color};color:rgba(0,0,0,0.5)`\n\n    return (\n      <tr>\n        <td>{move.name}</td>\n        <td>{move.effect[version]}</td>\n        <td style={type_style}>{type.name}</td>\n        <td style={category_style}>{category.name}</td>\n      </tr>\n    )\n  }\n  const generate_moves_section = async moves => {\n    const version = currentPokemon.value.version\n    return Promise.all(moves.map(move => generate_move_row(move, version)))\n  }\n\n  const generate_move_list = async moves => {\n    const move_section = await generate_moves_section(moves)\n    return (\n      <table>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Category</th>\n          <th>Type</th>\n        </tr>\n        {move_section}\n      </table>\n    )\n  }\n  const generate_moves_area = req => {\n    return Promise.all(\n      Object.entries(req).map(async ([method_id, moves]) => {\n        const method = await stores.value.move_learn_method.getItem(method_id)\n        const move_list = await generate_move_list(moves)\n        return (\n          <section id={method.id}>\n            <header>\n              <h2>{method.name}</h2>\n              <p class='tagline'>{method.description}</p>\n            </header>\n            {move_list}\n          </section>\n        )\n      })\n    )\n  }\n\n  useEffect(async () => {\n    const id = currentPokemon.value.id\n    const version = currentPokemon.value.version\n    const { moves } = await stores.value.pokemon_move.getItem(id)\n    const version_moves = moves[version]\n    move_list.value = await generate_moves_area(version_moves)\n  }, [currentPokemon.value.id, currentPokemon.value.version])\n\n  return <div class={style.moves_area}>{move_list.value}</div>\n}\n\nexport default MovesList\n","// extracted by mini-css-extract-plugin\nexport default {\"rotate\":\"rotate__Jkq5d\",\"rotation\":\"rotation__4Zr8b\",\"pokeball\":\"pokeball__1HbTN\"};","import { h } from 'preact'\nimport { useEffect, useContext } from 'preact/hooks'\nimport { useSignal } from '@preact/signals'\nimport style from './style.css'\nimport AppState from '../../appState'\n\nconst Loading = () => {\n  const { loading } = useContext(AppState)\n  const loadingStates = useSignal([])\n  const LoadingBall = () => (\n    <img\n      src='./assets/pokeball.svg'\n      class={[style.rotate, style.pokeball].join(' ')}\n    />\n  )\n  useEffect(() => {\n    const _loadingStates = Object.entries(loading.value)\n    loadingStates.value = _loadingStates\n      .map(([store, state]) => {\n        if (state) {\n          return (\n            <p>\n              <LoadingBall />\n              {state}\n            </p>\n          )\n        }\n        return 0\n      })\n      .filter(state => state != 0)\n  }, [loading.value])\n  return (\n    <div>\n      <p>Downloading a lot of data.</p>\n      <p>{loadingStates.value}</p>\n    </div>\n  )\n}\n\nexport default Loading\n","// extracted by mini-css-extract-plugin\nexport default {\"pokeSprite\":\"pokeSprite__H0Us5\"};","import convert from 'convert'\nimport { h } from 'preact'\nimport style from './style.css'\n\nimport { useContext, useEffect } from 'preact/hooks'\nimport { useSignal } from '@preact/signals'\nimport AppState from '../../appState'\n\nconst PokedexArea = () => {\n  const { stores, currentPokemon } = useContext(AppState)\n  if (!currentPokemon.value.id || !currentPokemon.value.version) return ''\n  //All these signals are because of how optimizing preact works.\n\n  const name = useSignal('')\n  const category = useSignal('')\n  const type1 = useSignal('')\n  const type2 = useSignal('')\n  const type1style = useSignal('')\n  const type2style = useSignal('')\n  const feet = useSignal('')\n  const andInches = useSignal('')\n  const meters = useSignal('')\n  const lb = useSignal('')\n  const kg = useSignal('')\n  const red_flavor_text = useSignal('')\n  const blue_flavor_text = useSignal('')\n  const image = useSignal('')\n  const prevImage = useSignal('')\n\n  async function updateVersion () {\n    const id = currentPokemon.value.id\n    const version = currentPokemon.value.version\n    const { entries } = await stores.value.pokemon_entry.getItem(id)\n    const { versions } = await stores.value.version_group.getItem(version)\n    red_flavor_text.value = entries[versions[0]] || ''\n    blue_flavor_text.value = entries[versions[1]] || ''\n  }\n\n  useEffect(async () => {\n    const id = currentPokemon.value.id\n    const { details } = await stores.value.pokemon.getItem(id)\n    const _image = await stores.value.sprite.getItem(id)\n    const _type1 = details.types[0]\n      ? await stores.value.type.getItem(details.types[0])\n      : { name: '', color: 'transparent' }\n    const _type2 = details.types[1]\n      ? await stores.value.type.getItem(details.types[1])\n      : { name: '', color: 'transparent' }\n    name.value = await stores.value.pokemon_name.getItem(id)\n    name.value = name.value.name\n    category.value = details.category\n    type1.value = _type1.name\n    type2.value = _type2.name\n    type1style.value = `background-color:${_type1.color};color:rgba(0,0,0,0.5)`\n    type2style.value = `background-color:${_type2.color};color:rgba(0,0,0,0.5)`\n    feet.value = details.height.feet\n    andInches.value = details.height.andInches\n    meters.value = details.height.meters\n    lb.value = details.weight.lb\n    kg.value = details.weight.kg\n    window.URL.revokeObjectURL(prevImage.value)\n    image.value = window.URL.createObjectURL(_image)\n    prevImage.value = image.value\n    await updateVersion()\n  }, [currentPokemon.value.id])\n\n  useEffect(updateVersion, [currentPokemon.value.version])\n\n  return (\n    <table style='width:100%;'>\n      <tr>\n        <td rowSpan={7}>\n          <img src={image.value} class={style.pokeSprite} />\n        </td>\n\n        <td colSpan={3}>{name}</td>\n      </tr>\n      <tr>\n        <td colSpan={3}>{category}</td>\n      </tr>\n      <tr>\n        <td>Types</td>\n        <td style={type1style}>{type1}</td>\n        <td style={type2style}>{type2}</td>\n      </tr>\n      <tr>\n        <td>Height</td>\n        <td colSpan={2}>\n          {feet}' {andInches}\" ({meters} m)\n        </td>\n      </tr>\n      <tr>\n        <td>Weight</td>\n        <td colSpan={2}>\n          {lb} lb ({kg} kg)\n        </td>\n      </tr>\n      <tr>\n        <td colSpan={3}>{red_flavor_text}</td>\n      </tr>\n      <tr>\n        <td colSpan={3}>{blue_flavor_text}</td>\n      </tr>\n    </table>\n  )\n}\n\nexport default PokedexArea\n","// extracted by mini-css-extract-plugin\nexport default {};","import { h } from 'preact'\nimport { useEffect, useContext } from 'preact/hooks'\nimport { useSignal } from '@preact/signals'\nimport style from './style.css'\nimport AppState from '../../appState'\n\nconst PokemonSearch = () => {\n  const { stores, currentPokemon } = useContext(AppState)\n\n  const pokemonSearchError = useSignal('')\n  const currentPokemonInput = useSignal('')\n  const listOfPokemonNames = useSignal([])\n  const listOfPokemonIds = useSignal([])\n  const nameIdMap = useSignal({})\n\n  useEffect(async () => {\n    const names = []\n    const ids = []\n    const _nameIdMap = {}\n    await stores.value.pokemon_name.iterate(({ id, name, order }) => {\n      names[order] = <option value={name} />\n      ids[order] = id\n      _nameIdMap[name.toLowerCase()] = id\n    })\n    listOfPokemonNames.value = names\n    listOfPokemonIds.value = ids\n    nameIdMap.value = _nameIdMap\n  }, [stores.value.pokemon_name])\n\n  const onSubmit = async e => {\n    e.preventDefault()\n    pokemonSearchError.value = ''\n    const pokemon = nameIdMap.value[currentPokemonInput.value.toLowerCase()]\n    if (pokemon && listOfPokemonIds.value.includes(pokemon)) {\n      currentPokemon.value = {\n        id: pokemon\n      }\n    } else {\n      pokemonSearchError.value = 'Could not find that pokemon'\n    }\n  }\n\n  return (\n    <div class={style.search}>\n      <form onSubmitCapture={onSubmit}>\n        <input\n          list='pokemon'\n          name='pokemon'\n          value={currentPokemonInput}\n          onInput={e => {\n            currentPokemonInput.value = e.target.value.trim()\n          }}\n        />\n        <input type='submit' value='Search by Pokemon' />\n      </form>\n      <p>{pokemonSearchError}</p>\n      <datalist id='pokemon'>{listOfPokemonNames.value}</datalist>\n    </div>\n  )\n}\n\nexport default PokemonSearch\n","import { h } from 'preact'\nimport { useContext, useEffect } from 'preact/hooks'\nimport { useSignal } from '@preact/signals'\nimport AppState from '../../appState'\n\nconst VersionSelector = () => {\n  const { stores, currentPokemon } = useContext(AppState)\n  const versionList = useSignal([])\n\n  if (!currentPokemon.value.id) return ''\n\n  useEffect(async () => {\n    if (!currentPokemon.value.version) {\n      const { versions } = await stores.value.pokemon_version.getItem(\n        currentPokemon.value.id\n      )\n      const _versionReqs = versions.map(version =>\n        stores.value.version_group.getItem(version)\n      )\n\n      const _versionList = await Promise.all(_versionReqs)\n      const sortedVersionList = _versionList.sort((a, b) => b.order - a.order)\n      versionList.value = sortedVersionList.map(({ id, name }) => (\n        <option value={id}>{name}</option>\n      ))\n      currentPokemon.value = {\n        ...currentPokemon.value,\n        version: sortedVersionList[0].id\n      }\n    }\n  }, [currentPokemon.value.id])\n  const onChange = e => {\n    currentPokemon.value = {\n      ...currentPokemon.value,\n      version: e.target.value\n    }\n  }\n\n  return (\n    <div style='display: flex; flex-direction:column;'>\n      <label>Version</label>\n      <select value={currentPokemon.value.version} onChange={onChange}>\n        {versionList.value}\n      </select>\n    </div>\n  )\n}\n\nexport default VersionSelector\n","import { useSignal } from '@preact/signals'\nimport { h } from 'preact'\nimport { useContext, useEffect } from 'preact/hooks'\nimport AppState from '../../appState'\nconst AbilityList = () => {\n  const { stores, currentPokemon } = useContext(AppState)\n  if (!currentPokemon.value.id || !currentPokemon.value.version) return ''\n  const ability_list = useSignal('')\n\n  const get_ability_row = async ability_id => {\n    const ability = await stores.value.ability.getItem(ability_id)\n    const version = currentPokemon.value.version\n    return (\n      <tr>\n        <td>{ability.name}</td>\n        <td>{ability.effect[version]}</td>\n      </tr>\n    )\n  }\n\n  const get_ability_list = async abilities => {\n    return Promise.all(\n      abilities.map(async ability => await get_ability_row(ability))\n    )\n  }\n\n  useEffect(async () => {\n    const id = currentPokemon.value.id\n    const { abilities } = await stores.value.pokemon.getItem(id)\n    ability_list.value = await get_ability_list(abilities)\n  }, [currentPokemon.value.id, currentPokemon.value.version])\n\n  return (\n    <table>\n      <tr>\n        <th colSpan={2}>Abilities</th>\n      </tr>\n      {ability_list.value}\n    </table>\n  )\n}\nexport default AbilityList\n"],"sourceRoot":""}